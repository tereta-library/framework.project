<?php declare(strict_types=1);

namespace Builder\Theme\Model\Theme;

use Builder\Theme\Model\Resource\Theme as ThemeResource;
use Builder\Theme\Model\Resource\Theme\Collection as ThemeCollection;
use Builder\Theme\Model\Theme as ThemeModel;
use Framework\Database\Abstract\Repository as AbstractRepository;
use Exception;
use DirectoryIterator;

/**
 * Generated by www.Tereta.dev on 2024-09-08 09:51:19
 *
 * @class Builder\Theme\Model\Theme\Repository
 * @package Builder\Theme\Model\Theme
 */
class Repository extends AbstractRepository 
{
    /**
     * @var ThemeResource
     */
    private ThemeResource $themeResource;

    /**
     * @var ThemeCollection
     */
    private ThemeCollection $themeCollection;

    /**
     * @throws Exception
     */
    public function __construct()
    {
        $this->themeResource = new ThemeResource;
        $this->themeCollection = new ThemeCollection;
    }

    /**
     * @param string $viewDirectory
     * @return array
     * @throws Exception
     */
    public function reindex(string $viewDirectory): array
    {
        $directoryIterator = new DirectoryIterator($viewDirectory);
        $registered = [];
        foreach ($directoryIterator as $item) {
            if($item->isDot()) continue;
            if (str_starts_with($item->getFilename(), '.')) continue;

            $registered = array_merge($registered, $this->registerTheme($viewDirectory, $item));
        }

        $unregistered = [];
        foreach ($this->themeCollection as $item) {
            $item->get('identifier');
            $unregistered = array_merge($unregistered, $this->unregisterTheme($viewDirectory, $item));
        }

        return [$registered, $unregistered];
    }

    /**
     * @param string $viewDirectory
     * @param ThemeModel $themeModel
     * @return array
     * @throws Exception
     */
    private function unregisterTheme(string $viewDirectory, ThemeModel $themeModel): array
    {
        $themeDirectory = "{$viewDirectory}/{$themeModel->get('identifier')}";
        $descriptionFile = "{$themeDirectory}/view.json";

        $description = [];
        if (is_file($descriptionFile)) {
            $description = json_decode(file_get_contents($descriptionFile), true);
        }

        if ($this->isValidDescription($description)) {
            return [];
        }

        $this->themeResource->delete($themeModel);

        return [$themeModel->get('identifier')];
    }

    /**
     * @param array $description
     * @return bool
     */
    private function isValidDescription(array $description): bool
    {
        $allowed = isset($description['name']) && $description['name'];
        $allowed = $allowed && isset($description['description']) && $description['description'];
        $allowed = $allowed && isset($description['imageTable']) && $description['imageTable'];
        $allowed = $allowed && isset($description['imageMobile']) && $description['imageMobile'];
        if (!$allowed) return false;
        return true;
    }

    /**
     * @param string $viewDirectory
     * @param DirectoryIterator $item
     * @return array
     * @throws Exception
     */
    private function registerTheme(string $viewDirectory, DirectoryIterator $item): array
    {
        $themeDirectory = "{$viewDirectory}/{$item->getFilename()}";
        $descriptionFile = "{$themeDirectory}/view.json";

        $description = [];
        if (is_file($descriptionFile)) {
            $description = json_decode(file_get_contents($descriptionFile), true);
        }

        if (!$this->isValidDescription($description)) {
            return [];
        }

        $this->themeResource->load($themeModel = new ThemeModel, ['identifier' => $item]);
        if ($themeModel->get('id')) {
            return [];
        }

        $themeModel->set('identifier', $item->getFilename());

        $this->themeResource->save($themeModel);

        return [$item->getFilename()];
    }
}
