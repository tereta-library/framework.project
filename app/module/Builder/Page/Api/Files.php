<?php declare(strict_types=1);

namespace Builder\Page\Api;

use Builder\Site\Api\Traits\Administrator as AdministratorTrait;
use Framework\Api\Interface\Api as Api;
use Exception;
use Framework\Application\Manager\Http\Parameter\Post as PostData;
use Framework\Helper\File as FileHelper;

/**
 * Generated by www.Tereta.dev on 2024-09-01 17:55:49
 *
 * @class Builder\Page\Api\Files
 * @package Builder\Page\Api
 */
class Files implements Api 
{
    use AdministratorTrait;

    /**
     * @param PostData $postData
     * @return array
     * @throws Exception
     * @api POST /^files\/getDirectory$/Usi
     */
    public function getDirectory(PostData $postData): array
    {
        $listing = [];
        $siteMedia = $this->siteModel->getMedia();
        $dir = $siteMedia->getPath($postData->get('pathDir'));
        $dirHandle = opendir($dir);
        while($item = readdir($dirHandle)) {
            if ($item == '.' || $item == '..') {
                continue;
            }

            $isDir = is_dir($dir . '/' . $item);
            $pathDir = $postData->get('pathDir') . (str_ends_with($postData->get('pathDir'), '/') ? '' : '/');
            $path = $pathDir . $item;
            $fileSize = $isDir ? null : filesize($dir . '/' . $item);
            $listingItem = [
                'name' => $item,
                'path' => $path,
                'size' => $this->formatFileSize($fileSize),
                'url' => $siteMedia->getUrl($pathDir . $item),
                'mimeType' => $isDir ? null : mime_content_type($dir . '/' . $item),
                'type' => $isDir ? 'dir' : 'file'
            ];

            $listing[] = $listingItem;
        }

        return [
            'pathDir' => $postData->get('pathDir'),
            'listing' => $listing,
            'error' => null
        ];
    }

    /**
     * @param PostData $postData
     * @return array
     * @throws Exception
     * @api POST /^files\/createFolder$/Usi
     */
    public function createFolder(PostData $postData): array
    {
        $pathDirectory = $postData->get('path');

        $siteMedia = $this->siteModel->getMedia();

        return [
            'pathDir' => $postData->get('pathDir'),
            'listing' => [],
            'error' => null
        ];
    }

    /**
     * @param PostData $postData
     * @return array
     * @throws Exception
     * @api POST /^files\/uploadFile$/Usi
     */
    public function uploadFile(PostData $postData): array
    {
        $filePath = $postData->get('path');
        $pathDir = $postData->get('pathDir');
        $file = $_FILES['file'] ?? null;

        $siteMedia = $this->siteModel->getMedia();

        return [
            'pathDir' => $postData->get('pathDir'),
            'listing' => [],
            'error' => null
        ];
    }

    /**
     * @api POST /^files\/remove$/Usi
     * @param PostData $postData
     * @return array
     */
    public function remove(PostData $postData): array
    {
        $targetPath = $postData->get('path');

        $siteMedia = $this->siteModel->getMedia();
        $target = $siteMedia->getPath($targetPath);

        FileHelper::getInstance()->remove($target);

        return $this->getDirectory($postData);
    }

    /**
     * @param int|null $bytes
     * @return string|null
     */
    private function formatFileSize(?int $bytes): ?string
    {
        if ($bytes === null) {
            return null;
        }

        if ($bytes >= 1073741824) {
            $size = number_format($bytes / 1073741824, 2);
            $unit = 'GB';
        } elseif ($bytes >= 1048576) {
            $size = number_format($bytes / 1048576, 2);
            $unit = 'MB';
        } elseif ($bytes >= 1024) {
            $size = number_format($bytes / 1024, 2);
            $unit = 'KB';
        } elseif ($bytes > 1) {
            $size = $bytes;
            $unit = 'bytes';
        } elseif ($bytes == 1) {
            $size = $bytes;
            $unit = 'byte';
        } else {
            $size = '0';
            $unit = 'bytes';
        }

        return $size . $unit;
    }
}
