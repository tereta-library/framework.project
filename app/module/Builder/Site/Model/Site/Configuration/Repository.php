<?php declare(strict_types=1);

namespace Builder\Site\Model\Site\Configuration;

use Framework\Database\Abstract\Repository as AbstractRepository;
use Framework\Database\Abstract\Model as AbstractModel;
use Exception;
use Builder\Site\Model\Resource\Site\Configuration as ResourceConfiguration;
use Builder\Site\Model\Site\Configuration as ModelConfiguration;
use \Builder\Site\Model\Resource\Site\Configuration\Value as ResourceConfigurationValue;

/**
 * Generated by www.Tereta.dev on 2024-09-08 12:45:03
 *
 * @class Builder\Site\Model\Site\Configuration\Repository
 * @package Builder\Site\Model\Site\Configuration
 */
class Repository extends AbstractRepository 
{
    /**
     * @var array $registeredKeys
     */
    protected array $registeredKeys = ['id', ['siteId', 'path']];

    /**
     * @var string
     */
    protected string $registeredId = 'id';

    /**
     * @var int $siteId
     */
    private int $siteId;

    /**
     * @var array $instanceSite
     */
    private static array $instanceSite = [];

    /**
     * @var ResourceConfiguration $resourceConfiguration
     */
    private ResourceConfiguration $resourceConfiguration;

    /**
     * @var ResourceConfigurationValue $resourceConfigurationValue
     */
    private ResourceConfigurationValue $resourceConfigurationValue;

    /**
     * @throws Exception
     */
    public function __construct(int $siteId)
    {
        $this->siteId = $siteId;
        $this->resourceConfiguration = new ResourceConfiguration;
        $this->resourceConfigurationValue = new ResourceConfigurationValue;
    }

    public static function getSiteInstance(int $siteId): static
    {
        if (isset(static::$instanceSite[$siteId])) {
            return static::$instanceSite[$siteId];
        }

        return static::$instanceSite[$siteId] = new static($siteId);
    }

    /**
     * @param string $path
     * @return string|null
     */
    public function get(string $path): ?string
    {
        if (!$valueModel = $this->getModel($path)) {
            return null;
        }

        return $valueModel->get('value');
    }

    public function set(string $key, string $value): static
    {
        $model = $this->getModel($key);
        $model->set('value', $value);

        $this->resourceConfigurationValue->save($model);

        return $this;
    }

    private function getModel(string $path): AbstractModel
    {
        if ($model = $this->getRegisterModel(['siteId' => $this->siteId, 'path' => $path])) {
            return $model;
        }

        $this->resourceConfiguration->loadByPath(
            $model = new ModelConfiguration,
            $this->siteId,
            $path
        );

        return $this->setRegisterModel($model);
    }
}
