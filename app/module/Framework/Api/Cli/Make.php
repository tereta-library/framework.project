<?php declare(strict_types=1);

namespace Framework\Api\Cli;

use Framework\Application\Manager as ApplicationManager;
use Framework\Cli\Interface\Controller;
use Framework\Cli\Symbol;
use Exception;
use Framework\Api\Interface\Api as ApiInterface;

/**
 * @class Framework\Api\Cli\Make
 */
class Make implements Controller
{
    /**
     * @var string
     */
    private string $rootDirectory;

    /**
     * @method __construct
     */
    public function __construct()
    {
        $this->rootDirectory = ApplicationManager::getRootDirectory();
    }

    /**
     * @cli make:api
     * @cliDescription Make API class: sample "php cli.php make:api Vendor/Module/Api/Class"
     * @param string $apiClass
     * @return void
     * @throws Exception
     */
    public function make(string $apiClass): void
    {
        $fullClassName = ltrim($apiClass, '/');
        $fullClassName = ltrim($fullClassName, '\\');
        $fullClassName = str_replace('\\', '/', $fullClassName);
        if (!preg_match('/^([A-Z]{1}[a-z]+)\/([A-Z]{1}[a-z]+)\/Api(\/[A-Z]{1}[a-z]+)+$/', $fullClassName)) {
            throw new Exception('Invalid model name, should be in the format of "Vendor/Module/Api/Name" or "Vendor/Module/Api/Space/Name"');
        }

        $fullClassName = str_replace('/', '\\', $fullClassName);

        $modelFile = "{$this->rootDirectory}/app/module/{$fullClassName}.php";
        $modelFile = str_replace('\\', '/', $modelFile);
        if (is_file($modelFile)) {
            throw new Exception("The {$modelFile} file already exists");
        }

        $dirName = dirname($modelFile);
        if (!is_dir($dirName)) {
            mkdir($dirName, 0755, true);
        }

        $classExploded = explode('\\', $fullClassName);
        $className = array_pop($classExploded);
        $namespace = implode('\\', $classExploded);
        $dateTime = date('Y-m-d H:i:s');
        $content = "<?php declare(strict_types=1);\n\n" .
            "namespace {$namespace};\n\n" .
            "use " . ApiInterface::class . " as Api;\n" .
            "use Exception;\n\n" .
            "/**\n" .
            " * Generated by www.Tereta.dev on {$dateTime}\n" .
            " *\n" .
            " * @class {$fullClassName}\n" .
            " * @package {$namespace}\n" .
            " */\n" .
            "class {$className} implements Api \n" .
            "{\n" .
            "    /**\n" .
            "     * @return array\n" .
            "     * @throws Exception\n" .
            "     * @api POST /^path\/toCustomFunction$/Usi\n" .
            "     */\n" .
            "    public function apiFunction(): array\n" .
            "    {\n" .
            "        return [];\n" .
            "    }\n" .
            "}\n";

        if (!file_put_contents($modelFile, $content)) {
            throw new Exception("The {$modelFile} file could not be created");
        }

        echo Symbol::COLOR_GREEN . "The \"{$fullClassName}\" model successfully created at the {$modelFile} file\n" . Symbol::COLOR_RESET;
    }
}